
<div class="container rgbgamebox">

  <div class="gameexplanation">
    <strong>ゲームの説明</strong><br>
    タイマーに関するゲーム設置予定<br>
    
  </div>


    <%# アプリ部分 %>
    <div id="timercountapp">

      <p>設定タイム{{random60}}秒</p>
      <p>今{{resetSec}}秒</p>
      <button v-on:click="startTimer">Start</button>
      <button @click="stopTimer(); showbtn()">Stop</button>

      <div v-bind:style="{opacity:noneorshow}">
        <p class= "gameclear" v-if="(random60 - resetSec) <= 100"/> 
          {{text}}
        </p>
        <p v-if="true"/>
          <input type="button" value="もう一度遊ぶ" onclick="window.location.reload(true);">
        </p>
      </div>

    </div>

</div>



<%# vue.jsのスクリプト部分 %>
<script>

  // Vueインスタン内で使う関数の定義

  var random60 =function(){
      var min = 0 ;
      var max = 60 ;
      var random60 = Math.floor( Math.random() * (max + 1 - min) ) + min ;
      return random60
      }
  
      


  // Vueインスタンス
new Vue({
    el:"#timercountapp",
    data:{
      resetSec: 0,
      timerObj:null,
      random60: random60(),
      text: "クリアですおめでとうございます!!",
      failtext:"残念、失敗です！！",
      noneorshow: '0',
    },

    methods:{
      startTimer:function(){
        this.resetSec = 0;
        this.timerObj = setInterval(() => {this.resetSec++}, 1000);
      },


      stopTimer:function(){
        clearInterval(this.timerObj);
      },

      showbtn:function(){
        this.noneorshow = '1'
      },

    },

   


    watch:{
      // 秒数を監視する
      resetSec: function(){
        // 100秒になったらタイマー 停止
        if(this.resetSec >= 10000){
          clearInterval(this.timerObj);
        }
      }

      }

      
    

})  





</script>




<%# 各種ゲームページの共通スタイルはgames.scssに記載 %>


